Multipage text format 1
Separator: -----JBY2XNBMSGEPEE0Y5G03CO7N7-----
funcpage/wiki/TextBlocks

-----JBY2XNBMSGEPEE0Y5G03CO7N7-----
funcpage/wiki/CCBlacklist

-----JBY2XNBMSGEPEE0Y5G03CO7N7-----
funcpage/wiki/PWL

-----JBY2XNBMSGEPEE0Y5G03CO7N7-----
wikipage/LofiGameSDK
2012-08-31/18:54:13  2012-08-31/17:05:33  2012-08-31/20:18:31

++ Lofi Game SDK



	* WikiSettings

[//OperatePattern]
[//EditorMVP]
[//TaggedEditorState]
-----JBY2XNBMSGEPEE0Y5G03CO7N7-----
wikipage/EditorMVP
2012-08-31/20:17:35  2012-08-31/17:15:15  2012-08-31/20:17:42
++ Editor MVP

*编辑器模型-视图-呈现器结构*

为编辑器扩展需求而设计的具有呈现器概念的逻辑与呈现相分离的结构。

_参考MSDN：*MVP*_

设计[EditorMVP]的重点在于如何完成一个没有界面的“编辑器”，这个“编辑器”就会在呈现器结构
中承担控制器(Controller)或呈现器(Presenter)的职责。

假定存在以下情况：
一个视图View1向一个呈现器Presenter1请求创建一个组件；
Presenter1接受请求创建组件，发送包含该组件信息的消息给侦听方；
另一视图View2已将自己注册为创建组件事件的侦听方，截获了该消息；
View2在新增的组件周围绘制尺寸控制手柄；
用户在某一控制柄上按下；
用户拖拽控制柄，此时View2向呈现器请求改变组件尺寸的操作；
Presenter1执行请求的操作，发布组件尺寸变更消息；
View2截获该消息，更新控制柄来贴合新的组件尺寸。

上述操作类似于点击某个按钮（于View1中），在组件编辑窗中创建一个新组件（组件编辑窗是另一个未提及的视图，成为View3）。
这个新组件出现在View3之后，位于其上层的修饰视图View2在组件所在的位置上显示尺寸调节手柄，供用户使用。
用户通过控制柄的拖拽产生了一个新的尺寸数据，于是View2发送命令（接口函数调用）来提交更改。
提交被接受之后新的尺寸消息被下发，View2有责任捕获该消息，于是它更新了自己的控制柄显示。

在上面描述的例子中，完全没有直接操作到“组件”这个操作目标本身。组件属于模型层次，被呈现器阻隔在视图
的另一侧。
另外，呈现器本身完全没有对视图的表现/交互方式做任何限制，它只接受合法操作的提交，并下发更新消息。
该Presenter1提供了两个接口方法和两个事件。 

*创建组件方法：void CreateComponent1(String type); * 
_为什么叫做CreateComponent1呢，参数化创建实例的方法是可扩展的，这表示执行Create a
Component行为的函数不唯一，例子中的只是其中的某一个。相关内容可参考[OperatePattern]_
该方法的做三个操作：它首先实例化一个type类型的可视组件，然后将该实例设置到一个合适
的初始尺寸并放置在视图的中间位置，最后广播ComponentCreated消息。

*组件创建消息：event ComponentCreated*
该事件有一个Component参数，表示新创建出的组件。有责任捕获该事件的视图可取用该参数完成自己的呈现任务。

*调整组件尺寸方法：void ComponentResize(Size new)*
可通过该方法将新的尺寸提交给Presenter1，Presenter1已事先记录了要修改哪个组件的尺寸（例子中是新建的组件）。
该方法在修改了组件尺寸后，广播ComponentResized消息。

*组件尺寸更改消息：event ComponentResized*
_该事件会同时引发一条叫做ComponentChanged内部消息，该内容会在[呈现器消息扩展约定]中做出解释_
该消息的参数是尺寸变更了的组件，有责任视图收到该消息后，可取的变更组件及其新尺寸。



*[OperatePattern]属于[EditorMVP]的视图层*
*[EditorMVP]的Model层有三项主要任务：管理项目（项目文件配置等）、资源管线（资源预处理）、映射游戏设计时项*
*Editor API涵盖了三个部分：Engine API、MVPModel层、MVPPresenter层*
*编辑器的设计原则是一切操作的中心都要取自*
*除了资源之外，最主要的游戏编辑工作就落在了游戏对象编辑上，该项工作通常包括参数化实例化以及可视化修改。这两项工作在EditorMVP中由OperatePattern完成*
*CreatePattern负责参数化实例化，ModifyPattern负责可视化修改*
*Presenter层的设计直接决定了OperatePattern的灵活性，但OperatePattern永远不能逾越View的界限，例如它始终只发送请求接受消息，而不会产生新的消息*
*对于MainEditCtrl来说，它实现了两个IView：IStageView和IComponentView，支持同时编辑场景以及场景中的树形组件*
*CreatePattern和ModifyPattern经常会以MainEditCtrl为中心视图，ContextToolBox永远只能是支持视图。但是注意OperatePattern从不能直接访问任何View*
*OperatePattern与所有的视图同属于统一层次，他们经由呈现器连接，可以操作一些IView*
*OperatePattern可以与定制视图实现位于同一程序集文件，但这不意味着他们能直接互操作，经由呈现器是必须的*
*ContextToolBox可以不是个真的ToolBox，它只要求视图能够提供简单的选项工具、输入工具和命令（按钮）工具*
*相较游戏对象的呈现器，资源管线的呈现器几乎是空白，这也让资源管线在视图层次上具有最大的灵活性。*
*呈现器设计得越抽象，视图就越灵活，前提是表意明确。对于上下文工具来说，”增加一个紧凑的选项呈现“可能导致视图上多一个ComboBox，”增加一个选项较少但要明显的选项呈现“可能导致视图上多出一组RadioButton。上下文工具本身可以是个工具条、停靠面板或是独立的非模态对话框。*








-----JBY2XNBMSGEPEE0Y5G03CO7N7-----
wikipage/OperatePattern
2012-08-31/17:24:10  2012-08-31/17:07:06  2012-08-31/20:23:47
++ Operate Pattern

OperatePattern即操作模式
它表示在某一个特定的编辑器状态下，以外部扩展操作扩展/替代编辑器操作/留空操作。
OperatePattern被限制在一个特定的编辑器逻辑状态下，例如创建模式的操作无法超出编辑器创建组件时的状态而执行。
一旦因某种原因改变了编辑器逻辑状态（创建模式执行完毕或者其他模块强制改变了编辑器逻辑状态等）
当前活动的操作模式应立即清理
创建模式可以在创建流程上提供良好的扩展性，并避免编辑器逻辑代码混乱
其中包含以下协定：
    * 创建模式必须在组件创建的过程中执行
    * 将操作发生的时机成为情况
    * 编辑器为情况提供数据和接口方法
    * 组件创建类库为情况提供操作逻辑
    * 创建模式必须添加PatternTarget特性才能被识别
    
    
    OperatePattern类
    
[//CreatePattern]
-----JBY2XNBMSGEPEE0Y5G03CO7N7-----
wikipage/CreatePattern
2012-08-31/17:09:03  2012-08-31/17:09:03  2012-08-31/20:23:49
++ Create Pattern

创建模式类
-----JBY2XNBMSGEPEE0Y5G03CO7N7-----
wikipage/TaggedEditorState
2012-08-31/19:00:09  2012-08-31/18:55:29  1970-01-01/00:00:00
++ Tagged Editor State

*标签化编辑器状态*
这是一种可读可扩展的编辑器状态集合。

内置的编辑器状态有以下几种：
    * 项目是否加载
    * 舞台是否激活
    * 


例子：
项目已加载，
-----JBY2XNBMSGEPEE0Y5G03CO7N7-----
wikipage/WikiSettings
2012-08-31/17:36:28  2012-08-31/17:05:33  2012-08-31/20:20:19
++ 维基设置

如下是你默认的全局设置。

[global.importance.low.color: grey]
[global.importance.high.bold: true]
[global.contact.icon: contact]
[global.wrap: 50]
[global.font: Microsoft YaHei]

[icon: cog]

-----JBY2XNBMSGEPEE0Y5G03CO7N7-----
wikipage/ScratchPad
2012-08-31/20:25:03  2012-08-31/17:05:33  2012-08-31/20:23:50
++ Scratch Pad

