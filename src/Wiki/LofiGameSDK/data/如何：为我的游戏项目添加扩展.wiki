++ 如何：为我的游戏项目添加扩展

[Lofinil Game SDK]提供了诸多扩展支持，这些扩展都是依赖于.NET和这个SDK中某些部件的源码级扩展。
    * 若需要现有组件包未提供的管理模块，请参考[//如何：制作并导入引擎管理模块]
    * 若需要现有组件包未提供的组件，请参考[//如何：制作并导入自定义组件]
    * 若需要现有组件包未提供的操作流程，请参考[//如何：制作并导入操作模式]
    * 若想要自定义的编辑界面，请参考[//如何：制作并导入自定义编辑器]
    * 若需要新的触发器，请参考[//理解触发器对模块和组件的依附关系]
    
    _*注意，编辑器方面的扩展无法逾[//Editor]库形成的设计协定，同样，对模块和组件的扩展也无法逾越[//Engine]的上层管理。*_
    
    
    
    
    
- 触发器系统扩展性
- 组件集合序列化扩展性
- 扩展的载体Dll

组件集合序列化扩展性



技术原理
这里的扩展性是纯粹的技术上的需要。Xml序列化的输入是文本，而不包含任何类型信息。这造成对基类容器执行序列化的时候，其中的派生类引用无法被识别。XmlSerialization提供了一种可行的操作方案，在系统层面上对这个操作方案的实施就是“组件集合序列化扩展”的本质。
对派生类执行序列化的操作方案参考：对组件集合实施Xml序列化的方案




原以为只有到触发器阶段才会涉及到扩展性，但是现在在做场景对象时，发现场景数据无法自动序列化组件类的派生类。
需要在场景对象的序列化器中注册派生类的节点名称和类型。这个注册功能也要交给扩展系统基于反射来完成。
下面给扩展性打个草稿。

扩展的来源就是些dll，各种扩展信息都在dll当中。
目前考虑到的扩展：
1. 新增组件，即所有实现ILEComponent的类
2. 新增模块，实现IModule的类
3. 触发器部件，比如新增了一种数据模块或者组件，它会提供许多访问器、检查器和行为器。
* 扩展场景模式，例如Tile引擎，它是一种复合扩展，包括Tile组件、Tile数据模块和Tile逻辑模块共同构成。

不管是设计时还是运行时的扩展控制都由引擎完成，编辑器不独自持有任何程序集信息。当然编辑器可以独自持有编辑器扩展程序集。
（如果编码时将两者分开的话）
扩展输入依赖于一个程序集列表文件，在设计时该信息是项目文件的一部分，运行时它被放在游戏配置中。

动态加载程序集之后要立即对该程序集进行初始分析，这个分析由各部分分别承担。
组件扩展分析分成：
     组件构成分析 -- 组件类型和组件依赖
     组件存储分析 -- 场景数据包含的组件存储（以后可能还会增加原型数据） 


??? 如果一个程序集先于它的依赖集被加载，而特性中又引用了依赖集的类型，是否会出现问题？？？
LoadFromContext的MDA异常如何妥善处理
