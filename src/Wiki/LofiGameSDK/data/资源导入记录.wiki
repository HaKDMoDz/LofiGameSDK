++ 资源导入记录

对于资源库中的一幅图片来说，在项目中需要记录它的原始图片文件以及编译结果（格式转换、是否压缩等）。
在XNA中，定位原始图片用Image.png、Image.tga等，但是定位输出时就变成了没有后缀名的Image。
也有可能有一个别的需求是在输出时加上个后缀数字什么的，我需要对这种可能做几个最基本的支持--将导入记录分为两个文件。
第一个文件属于项目文件，记录了原始引用、转换后的引用，另一个文件目前用不到，先不用做它，这个文件只包含了运行时寻找编译结果的路径。
引擎提供一个按照编译结果加载资源的接口，在此基础上有一套从第二个文件加载资源的方法，在编辑器中，按照第一个文件中的信息，通过接口方法命令引擎加载就好了。
在游戏项目中，则使用第二个文件来调用接口。
第二个文件在发布游戏时生成。

也就是说原始资源信息在游戏包中是没有的，它只有资源编辑结果这个直接信息。

资源导入集(不同输入类型的列表)   -   资源导入项（访问的Key、处理管线、输入的Key）
        |
内容集（不同运行时内容记录）     -   内容项（文件/包读取访问器）


+++关于访问的Key和输出的Key
这是抽象概念，资源内容的存在形式不外乎文件、包的一部分、数据流三种。
这个Key并不强制存在形式，它只保存通用的关键信息供存取模块试图访问具体数据时使用。
比如说，如果一种数据以文件存储，Key就是文件路径，或者提供给搜索模块的唯一名称；
数据包本质上是放在一个或多个大文件中的文件系统，和以文件存储的结果是一样的。
数据流的情况下通常记录具资源在流上的位置或者其查找映射。


+++关于Resource的Id和Content的Id
这两种Id本身没有关系，一个属于设计时的原始资源输入，同运行时无关。
另一个表示运行时用于区分的标记。
但是它们通常一一对应，输入图片通常处理过还是图片，他们的Id都属图片Id（如上，这两者相同不冲突）。
也有例外，比如图片输入被转换为字体等。


+++关于Key
Key是找到真正资源数据的关键，ResourceKey和ContentKey是不同的，ResourceKey是相对项目路径而言的，ContentKey是相对运行时而言的。
中间要发生转换 -- 可以可行的方法是在设计时，那个ContentKey是假的，可以存储一个绝对路径……。。。  。X XX     X    XX   XX
路径问题跟本没那么复杂，不用做什么转换，直接设好工作目录就行了。
！！Content的资源分类目录设置全部取消掉，没必要的。

*总得来说，Resource的记录应该包含Content记录，因为Content记录是发布时有Resource记录产生的。*


对于类库共享的数据，尽量放进基共享类中，而不要单独立库。




===========（I/O）
资源层
===========（I/O）
内容层
===========
内容引用层
===========
组件实例层
===========
……
